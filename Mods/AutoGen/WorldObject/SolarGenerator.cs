// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
      using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    
    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]                   
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(PowerGridComponent))]              
    [RequireComponent(typeof(PowerGeneratorComponent))]         
    [RequireComponent(typeof(HousingComponent))]                  
    [RequireComponent(typeof(SolidGroundComponent))]            
    [RequireComponent(typeof(LiquidConsumerComponent))]         
    [PowerGenerator(typeof(ElectricPower))]                 
    public partial class SolarGeneratorObject : 
        WorldObject,    
        IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Solar Generator"); } } 

        public override TableTextureMode TableTexture => TableTextureMode.Metal; 

        public virtual Type RepresentedItemType { get { return typeof(SolarGeneratorItem); } } 



        protected override void Initialize()
        {

            this.GetComponent<PowerGridComponent>().Initialize(30, new ElectricPower());        
            this.GetComponent<PowerGeneratorComponent>().Initialize(750);                       
            this.GetComponent<HousingComponent>().Set(SolarGeneratorItem.HousingVal);                               

            this.GetComponent<LiquidConsumerComponent>().Setup(typeof(WaterItem), 0.3f, this.NamedOccupancyOffset("WaterInputPort"), 0.9f); 
        }

        public override void Destroy()
        {
            base.Destroy();
        }
       
    }

    [Serialized]
    [LocDisplayName("Solar Generator")]
    [Ecopedia("Crafted Objects", "Power Generation", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]                                                                           
    public partial class SolarGeneratorItem :
        WorldObjectItem<SolarGeneratorObject> 
    {
        public override LocString DisplayDescription => Localizer.DoStr("Generates electrical power from the sun! It also stores energy to work at night.");

        static SolarGeneratorItem()
        {
            
        }

        [TooltipChildren] public HousingValue HousingTooltip { get { return HousingVal; } }
        [TooltipChildren] public static HousingValue HousingVal { get { return new HousingValue() 
                                                {
                                                    Category = "Industrial",
                                                    TypeForRoomLimit = "", 
        };}}
        
        [Tooltip(8)] private LocString PowerProductionTooltip  => Localizer.Do($"Produces: {Text.Info(750)}w of {new ElectricPower().Name} power");             

    }

    [RequiresSkill(typeof(ElectronicsSkill), 1)]     
    public partial class SolarGeneratorRecipe :
        RecipeFamily
    {
        public SolarGeneratorRecipe()
        {
            var product = new Recipe(
                "SolarGenerator",
                Localizer.DoStr("Solar Generator"),
                new IngredientElement[]
                {
               new IngredientElement(typeof(SteelBarItem), 12, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
               new IngredientElement(typeof(ServoItem), 8, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
               new IngredientElement(typeof(BasicCircuitItem), 8, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)),    
                },
               new CraftingElement<SolarGeneratorItem>()
            );
            this.Initialize(Localizer.DoStr("Solar Generator"), typeof(SolarGeneratorRecipe));
            this.Recipes = new List<Recipe> { product };
            this.ExperienceOnCraft = 20;  
            this.LaborInCalories = CreateLaborInCaloriesValue(1000, typeof(ElectronicsSkill), typeof(SolarGeneratorRecipe), this.UILink()); 
            this.CraftMinutes = CreateCraftTimeValue(typeof(SolarGeneratorRecipe), this.UILink(), 20, typeof(ElectronicsSkill), typeof(ElectronicsFocusedSpeedTalent), typeof(ElectronicsParallelSpeedTalent));     
            this.Initialize(Localizer.DoStr("Solar Generator"), typeof(SolarGeneratorRecipe));
            CraftingComponent.AddRecipe(typeof(ElectronicsAssemblyObject), this);
        }
    }
}

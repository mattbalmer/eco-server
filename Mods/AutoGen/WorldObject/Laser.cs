// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
      using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    

    [Serialized]
    [LocDisplayName("Laser")]
    [Ecopedia("Crafted Objects", "Specialty", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]                                                                           
    public partial class LaserItem :
        WorldObjectItem<LaserObject> 
    {
        public override LocString DisplayDescription => Localizer.DoStr("AVOID DIRECT EYE EXPOSURE");

        static LaserItem()
        {
            
        }

        [TooltipChildren] public HousingValue HousingTooltip { get { return HousingVal; } }
        [TooltipChildren] public static HousingValue HousingVal { get { return new HousingValue() 
                                                {
                                                    Category = "Industrial",
                                                    TypeForRoomLimit = "", 
        };}}
        
        [Tooltip(7)] private LocString PowerConsumptionTooltip => Localizer.Do($"Consumes: {Text.Info(6000)}w of {new ElectricPower().Name} power");            

    }

    [RequiresSkill(typeof(ElectronicsSkill), 1)]     
    public partial class LaserRecipe :
        RecipeFamily
    {
        public LaserRecipe()
        {
            var product = new Recipe(
                "Laser",
                Localizer.DoStr("Laser"),
                new IngredientElement[]
                {
               new IngredientElement(typeof(GoldBarItem), 80, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
               new IngredientElement(typeof(SteelBarItem), 80, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
               new IngredientElement(typeof(FramedGlassItem), 80, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
               new IngredientElement(typeof(AdvancedCircuitItem), 40, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)),    
               new IngredientElement(typeof(ElectricMotorItem), 2, true), 
               new IngredientElement(typeof(RadiatorItem), 10, true),  
                },
               new CraftingElement<LaserItem>()
            );
            this.Initialize(Localizer.DoStr("Laser"), typeof(LaserRecipe));
            this.Recipes = new List<Recipe> { product };
            this.ExperienceOnCraft = 50;  
            this.LaborInCalories = CreateLaborInCaloriesValue(1500, typeof(ElectronicsSkill), typeof(LaserRecipe), this.UILink()); 
            this.CraftMinutes = CreateCraftTimeValue(typeof(LaserRecipe), this.UILink(), 100, typeof(ElectronicsSkill), typeof(ElectronicsFocusedSpeedTalent), typeof(ElectronicsParallelSpeedTalent));     
            this.Initialize(Localizer.DoStr("Laser"), typeof(LaserRecipe));
            CraftingComponent.AddRecipe(typeof(RoboticAssemblyLineObject), this);
        }
    }
}

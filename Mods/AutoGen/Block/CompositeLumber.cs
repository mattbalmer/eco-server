// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Core.Items;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.World;
    using Eco.World.Blocks;
    using Eco.Gameplay.Pipes;

    /// <summary>Auto-generated class. Don't modify it! All your changes will be wiped with next update! Use Mods* partial methods instead for customization.</summary>
    [RequiresSkill(typeof(CompositesSkill), 1)]      
    public partial class CompositeLumberRecipe :
        RecipeFamily
    {
        public CompositeLumberRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "CompositeLumber",
                    Localizer.DoStr("Composite Lumber"),
                    new IngredientElement[]
                    {
                    new IngredientElement(typeof(PlasticItem), 1, typeof(CompositesSkill), typeof(CompositesLavishResourcesTalent)), 
                    new IngredientElement(typeof(EpoxyItem), 1, typeof(CompositesSkill), typeof(CompositesLavishResourcesTalent)),    
                    new IngredientElement("Wood", 1, typeof(CompositesSkill), typeof(CompositesLavishResourcesTalent)), 
                    new IngredientElement("Lumber", 1, typeof(CompositesSkill), typeof(CompositesLavishResourcesTalent)),    
                    },
                    new CraftingElement[]
                    {
                    new CraftingElement<CompositeLumberItem>(),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(200, typeof(CompositesSkill), typeof(CompositeLumberRecipe), this.UILink()); 
            this.ExperienceOnCraft = 1.5f;  
            this.CraftMinutes = CreateCraftTimeValue(typeof(CompositeLumberRecipe), this.UILink(), 2, typeof(CompositesSkill), typeof(CompositesFocusedSpeedTalent), typeof(CompositesParallelSpeedTalent));     
            this.ModsPreInitialize();
            this.Initialize(Localizer.DoStr("Composite Lumber"), typeof(CompositeLumberRecipe));
            this.ModsPostInitialize();

            CraftingComponent.AddRecipe(typeof(AdvancedCarpentryTableObject), this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [Solid, Wall, Constructed]
    [BlockTier(4)]                                          
    [RequiresSkill(typeof(CompositesSkill), 1)]      
    public partial class CompositeLumberBlock :
        Block            
        , IRepresentsItem   
    {
        public Type RepresentedItemType { get { return typeof(CompositeLumberItem); } }  
    }

    [Serialized]
    [LocDisplayName("Composite Lumber")]
    [MaxStackSize(40)]                           
    [Weight(10000)]      
    [Ecopedia("Blocks", "Building Materials", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]                    
    [Currency][Tag("Currency")]                              
    [Tag("CompositeLumber", 1)]
    [Tag("Constructable", 1)]                         
    [Tier(4)]                                      
    public partial class CompositeLumberItem :
    BlockItem<CompositeLumberBlock>
    {
        public override LocString DisplayNamePlural { get { return Localizer.DoStr("Composite Lumber"); } } 
        public override LocString DisplayDescription { get { return Localizer.DoStr("A composite lumber made from a combination of wood and plastic."); } }

        public override bool CanStickToWalls { get { return false; } }  

        private static Type[] blockTypes = new Type[] {
        typeof(CompositeLumberStacked1Block),
        typeof(CompositeLumberStacked2Block),
        typeof(CompositeLumberStacked3Block),
            typeof(CompositeLumberStacked4Block)
        };
        public override Type[] BlockTypes { get { return blockTypes; } }
    }

    [Serialized, Solid] public class CompositeLumberStacked1Block : PickupableBlock { }
    [Serialized, Solid] public class CompositeLumberStacked2Block : PickupableBlock { }
    [Serialized, Solid] public class CompositeLumberStacked3Block : PickupableBlock { }
    [Serialized, Solid,Wall] public class CompositeLumberStacked4Block : PickupableBlock { } //Only a wall if it's all 4 CompositeLumber
}
